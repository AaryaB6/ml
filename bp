import numpy as np


def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])

y = np.array([[0], [1], [1], [0]])

np.random.seed(1)
input_size = 2
hidden_size = 3
output_size = 1

W1 = np.random.uniform(-1, 1, (input_size, hidden_size))  
b1 = np.random.uniform(-1, 1, (1, hidden_size)) 
W2 = np.random.uniform(-1, 1, (hidden_size, output_size))  

b2 = np.random.uniform(-1, 1, (1, output_size))  


epochs = 10000
learning_rate = 0.1


for epoch in range(epochs):
    
    hidden_input = np.dot(X, W1) + b1 
    hidden_output = sigmoid(hidden_input) 

    final_input = np.dot(hidden_output, W2) + b2  
    predicted_output = sigmoid(final_input)  

    
    error = (y - predicted_output)
    
   
    error2 = error * sigmoid_derivative(predicted_output)
   


   
    error1 = np.dot(error2, W2.T) * sigmoid_derivative(hidden_output)

   
    W2 += np.dot(hidden_output.T, error2) * learning_rate
    b2 += np.sum(error2, axis=0, keepdims=True) * learning_rate
    W1 += np.dot(X.T, error1) * learning_rate
    b1 += np.sum(error1, axis=0, keepdims=True) * learning_rate

   
    if epoch % 1000 == 0:
        loss = np.mean(np.abs(error))
        print(f"Epoch {epoch}: Loss = {loss:.4f}")


print("\nTrained Network Output:")
print(predicted_output.round())  
